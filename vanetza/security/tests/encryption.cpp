#include <gtest/gtest.h>
#include <vanetza/security/backend_openssl.hpp>
#include <vanetza/common/byte_buffer.hpp>

using namespace vanetza::security;

TEST(Encryption, AesCcmEncryption)
{
    BackendOpenSsl backend;
    std::array<uint8_t, 16> aes_key {{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
                                       0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                                       0x0c, 0x0d, 0x0e, 0x0f }};
    std::array<uint8_t, 12> aes_nonce {{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
                                         0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b }};
    vanetza::ByteBuffer data {{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
                                0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b }};


    vanetza::ByteBuffer encrypted_data;
    std::array<uint8_t, 16> encrypted_data_tag;

    backend.aes_ccm_encrypt(data, aes_key, aes_nonce, encrypted_data, encrypted_data_tag);

    EXPECT_EQ(encrypted_data.size(), data.size());
}

TEST(Encryption, EncryptService)
{
    BackendOpenSsl backend;
    ecdsa256::PublicKey public_key;
    public_key.x = {0xcf, 0x20, 0xfb, 0x9a, 0x1d, 0x11, 0x6c, 0x5e,
                    0x9f, 0xec, 0x38, 0x87, 0x6c, 0x1d, 0x2f, 0x58,
                    0x47, 0xab, 0xa3, 0x9b, 0x79, 0x23, 0xe6, 0xeb,
                    0x94, 0x6f, 0x97, 0xdb, 0xa3, 0x7d, 0xbd, 0xe5};
    public_key.y = {0x26, 0xca, 0x07, 0x17, 0x8d, 0x26, 0x75, 0xff,
                    0xcb, 0x8e, 0xb6, 0x84, 0xd0, 0x24, 0x02, 0x25,
                    0x8f, 0xb9, 0x33, 0x6e, 0xcf, 0x12, 0x16, 0x2f,
                    0x5c, 0xcd, 0x86, 0x71, 0xa8, 0xbf, 0x1a, 0x47};
    std::string curve_name = "prime256v1";
    vanetza::ByteBuffer data {{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
                                0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b }};
    vanetza::ByteBuffer shared_info;

    backend.encrypt_data(public_key, curve_name, data, shared_info);
}

// Test vectors from IEEE 1609.2 Annex D.6
TEST(Encryption, HmacSha256)
{
    vanetza::ByteBuffer key {{
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b
    }};

    vanetza::ByteBuffer data {{
        0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65
    }};

    std::array<uint8_t, 16> expected {{
        0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53,
        0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b
    }};

    BackendOpenSsl backend;
    std::array<uint8_t, 16> actual = backend.hmac_sha256(key, data);

    EXPECT_EQ(expected, actual);
}

TEST(Encryption, HkdfSha256WithSharedInfo)
{
    vanetza::ByteBuffer shared_secret {{
        0x22, 0x51, 0x8B, 0x10, 0xE7, 0x0F, 0x2A, 0x3F,
        0x24, 0x38, 0x10, 0xAE, 0x32, 0x54, 0x13, 0x9E,
        0xFB, 0xEE, 0x04, 0xAA, 0x57, 0xC7, 0xAF, 0x7D
    }};

    vanetza::ByteBuffer shared_info {{
        0x75, 0xEE, 0xF8, 0x1A, 0xA3, 0x04, 0x1E, 0x33,
        0xB8, 0x09, 0x71, 0x20, 0x3D, 0x2C, 0x0C, 0x52
    }};

    const size_t output_length = 128;

    vanetza::ByteBuffer expected {{
        0xC4, 0x98, 0xAF, 0x77, 0x16, 0x1C, 0xC5, 0x9F,
        0x29, 0x62, 0xB9, 0xA7, 0x13, 0xE2, 0xB2, 0x15,
        0x15, 0x2D, 0x13, 0x97, 0x66, 0xCE, 0x34, 0xA7,
        0x76, 0xDF, 0x11, 0x86, 0x6A, 0x69, 0xBF, 0x2E,
        0x52, 0xA1, 0x3D, 0x9C, 0x7C, 0x6F, 0xC8, 0x78,
        0xC5, 0x0C, 0x5E, 0xA0, 0xBC, 0x7B, 0x00, 0xE0,
        0xDA, 0x24, 0x47, 0xCF, 0xD8, 0x74, 0xF6, 0xCF,
        0x92, 0xF3, 0x0D, 0x00, 0x97, 0x11, 0x14, 0x85,
        0x50, 0x0C, 0x90, 0xC3, 0xAF, 0x8B, 0x48, 0x78,
        0x72, 0xD0, 0x46, 0x85, 0xD1, 0x4C, 0x8D, 0x1D,
        0xC8, 0xD7, 0xFA, 0x08, 0xBE, 0xB0, 0xCE, 0x0A,
        0xBA, 0xBC, 0x11, 0xF0, 0xBD, 0x49, 0x62, 0x69,
        0x14, 0x2D, 0x43, 0x52, 0x5A, 0x78, 0xE5, 0xBC,
        0x79, 0xA1, 0x7F, 0x59, 0x67, 0x6A, 0x57, 0x06,
        0xDC, 0x54, 0xD5, 0x4D, 0x4D, 0x1F, 0x0B, 0xD7,
        0xE3, 0x86, 0x12, 0x8E, 0xC2, 0x6A, 0xFC, 0x21
    }};

    BackendOpenSsl backend;
    vanetza::ByteBuffer actual = backend.kdf2_sha256(shared_secret, shared_info, output_length);

    EXPECT_EQ(expected, actual);
}

TEST(Encryption, HkdfSha256WithoutSharedInfo)
{
    vanetza::ByteBuffer shared_secret {{
        0x96, 0xC0, 0x56, 0x19, 0xD5, 0x6C, 0x32, 0x8A,
        0xB9, 0x5F, 0xE8, 0x4B, 0x18, 0x26, 0x4B, 0x08,
        0x72, 0x5B, 0x85, 0xE3, 0x3F, 0xD3, 0x4F, 0x08
    }};

    vanetza::ByteBuffer shared_info {};

    const size_t output_length = 16;

    // expected =  0x443024C3DAE66B95E6F5670601558F71
    vanetza::ByteBuffer expected {{
        0x44, 0x30, 0x24, 0xC3, 0xDA, 0xE6, 0x6B, 0x95,
        0xE6, 0xF5, 0x67, 0x06, 0x01, 0x55, 0x8F, 0x71
    }};

    BackendOpenSsl backend;
    vanetza::ByteBuffer actual = backend.kdf2_sha256(shared_secret, shared_info, output_length);

    EXPECT_EQ(expected, actual);
}
