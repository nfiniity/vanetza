#include <vanetza/pki/ectl_security_entity.hpp>
#include <boost/algorithm/hex.hpp>

namespace vanetza
{

namespace pki
{

// TODO: remove
const ByteBuffer ea_certificate_buffer {{
    0x80, 0x03, 0x00, 0x82, 0x08, 0x87, 0xe5, 0x80, 0xdd, 0x2b, 0x0d, 0x47, 0xff, 0x19, 0x81, 0x0c,
    0x30, 0x5f, 0x43, 0x4d, 0x43, 0x2d, 0x45, 0x41, 0x31, 0x5f, 0x4c, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1f, 0x88, 0xee, 0x86, 0x86, 0x00, 0x05, 0x01, 0x01, 0x80, 0x02, 0x02, 0x6f, 0x81, 0x03,
    0x02, 0x01, 0x0e, 0x01, 0x02, 0x20, 0x80, 0x01, 0x08, 0x80, 0x01, 0x24, 0x82, 0x08, 0x03, 0x01,
    0xff, 0xfc, 0x03, 0xff, 0x00, 0x03, 0x80, 0x01, 0x25, 0x82, 0x0a, 0x04, 0x01, 0xff, 0xff, 0xff,
    0x04, 0xff, 0x00, 0x00, 0x00, 0x80, 0x01, 0x89, 0x82, 0x06, 0x02, 0x01, 0xe0, 0x02, 0xff, 0x1f,
    0x80, 0x01, 0x8a, 0x82, 0x06, 0x02, 0x01, 0xc0, 0x02, 0xff, 0x3f, 0x80, 0x01, 0x8b, 0x82, 0x0e,
    0x06, 0x01, 0x74, 0x40, 0x01, 0xff, 0xf8, 0x06, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01,
    0x8c, 0x82, 0x0a, 0x04, 0x01, 0xff, 0xff, 0xe0, 0x04, 0xff, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x8d,
    0x80, 0x02, 0x02, 0x6f, 0x82, 0x06, 0x02, 0x01, 0xc0, 0x02, 0xff, 0x3f, 0x40, 0x00, 0x80, 0x01,
    0x01, 0x80, 0x02, 0x02, 0x6f, 0x82, 0x06, 0x02, 0x01, 0xc0, 0x02, 0xff, 0x3f, 0x00, 0x81, 0x82,
    0x85, 0x64, 0x3c, 0x3b, 0xe9, 0x06, 0x81, 0xfa, 0x98, 0x7f, 0x4a, 0x89, 0x47, 0xcb, 0x21, 0x16,
    0xfc, 0x7c, 0x08, 0x35, 0xdd, 0x83, 0x45, 0x2d, 0x69, 0x9b, 0x7f, 0x2c, 0x5e, 0x40, 0x93, 0x2d,
    0x80, 0x81, 0x83, 0x1c, 0x1d, 0x11, 0xe0, 0xd2, 0x57, 0xf9, 0xdd, 0x05, 0x6c, 0xfb, 0xc0, 0x71,
    0xa3, 0x93, 0x11, 0xea, 0x42, 0xe9, 0x33, 0x4c, 0x25, 0x22, 0x2f, 0xf2, 0x54, 0xc6, 0xb7, 0xa9,
    0x19, 0x30, 0x49, 0x82, 0x61, 0x80, 0x88, 0xaf, 0x09, 0xf3, 0x30, 0x1b, 0xfa, 0x01, 0xd8, 0x07,
    0x06, 0xa5, 0x37, 0x46, 0x82, 0x19, 0xfe, 0x0a, 0x29, 0x6e, 0x21, 0x52, 0x7d, 0xf9, 0x30, 0x93,
    0xb8, 0x64, 0x38, 0x79, 0x6b, 0x92, 0xf1, 0x89, 0x32, 0x24, 0x23, 0x5a, 0xe4, 0x43, 0x43, 0x2b,
    0xc2, 0x2f, 0xea, 0xc4, 0xf3, 0x1d, 0x53, 0x4f, 0xfe, 0xdf, 0xd5, 0x2d, 0xb2, 0x88, 0x38, 0xe9,
    0x18, 0x34, 0x2f, 0x6a, 0x7a, 0xad, 0x84, 0x09, 0x19, 0xde, 0x92, 0xdd, 0xb2, 0x4b, 0x9f, 0x90,
    0x76, 0x93, 0x8f, 0xdd, 0x20, 0xa4, 0x1c, 0x0b, 0xfb, 0x8a, 0xf9, 0xf7, 0x38, 0x64, 0x96, 0x06,
    0x05, 0xdf, 0xe0, 0xd4, 0xa1, 0x6f
}};

const security::CertificateV3 ea_certificate(ea_certificate_buffer);

const ByteBuffer aa_certificate_buffer{{
    0x80, 0x03, 0x00, 0x82, 0x08, 0x87, 0xe5, 0x80, 0xdd, 0x2b, 0x0d, 0x47, 0xff, 0x19, 0x81, 0x0c,
    0x30, 0x5f, 0x43, 0x4d, 0x43, 0x2d, 0x41, 0x41, 0x31, 0x5f, 0x4c, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1f, 0x88, 0xf1, 0x2d, 0x86, 0x00, 0x05, 0x01, 0x01, 0x80, 0x02, 0x02, 0x6f, 0x81, 0x03,
    0x02, 0x01, 0x32, 0x01, 0x01, 0x00, 0x80, 0x01, 0x07, 0x80, 0x01, 0x24, 0x82, 0x08, 0x03, 0x01,
    0xff, 0xfc, 0x03, 0xff, 0x00, 0x03, 0x80, 0x01, 0x25, 0x82, 0x0a, 0x04, 0x01, 0xff, 0xff, 0xff,
    0x04, 0xff, 0x00, 0x00, 0x00, 0x80, 0x01, 0x89, 0x82, 0x06, 0x02, 0x01, 0xe0, 0x02, 0xff, 0x1f,
    0x80, 0x01, 0x8a, 0x82, 0x06, 0x02, 0x01, 0xc0, 0x02, 0xff, 0x3f, 0x80, 0x01, 0x8b, 0x82, 0x0e,
    0x06, 0x01, 0x74, 0x40, 0x01, 0xff, 0xf8, 0x06, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01,
    0x8c, 0x82, 0x0a, 0x04, 0x01, 0xff, 0xff, 0xe0, 0x04, 0xff, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x8d,
    0x00, 0x81, 0x83, 0x89, 0x6a, 0xd1, 0xee, 0x3c, 0xa8, 0x08, 0x86, 0xac, 0x65, 0xcd, 0x45, 0xff,
    0x71, 0x24, 0x56, 0x68, 0x42, 0x8e, 0xbf, 0x86, 0xeb, 0x86, 0x3b, 0x7e, 0xdc, 0x6a, 0x61, 0x79,
    0x21, 0x57, 0x3e, 0x80, 0x81, 0x82, 0x07, 0x62, 0xc3, 0x6a, 0x32, 0x2b, 0x9e, 0xe6, 0x79, 0x42,
    0x3b, 0xca, 0x93, 0xa5, 0x25, 0x2a, 0x7d, 0x76, 0xe4, 0x9c, 0x22, 0xc8, 0x06, 0x95, 0xc5, 0x80,
    0x5b, 0x68, 0x59, 0x42, 0xae, 0x4a, 0x82, 0x61, 0x80, 0x2a, 0xc1, 0x36, 0xd7, 0xf9, 0xf8, 0x32,
    0x5c, 0x6d, 0xe6, 0x45, 0x06, 0x02, 0x69, 0x2d, 0xcb, 0x4a, 0x9c, 0xe2, 0x1e, 0x0f, 0xa3, 0x5f,
    0x7f, 0xa9, 0xf8, 0xe7, 0x4e, 0xf7, 0x1e, 0x7b, 0xb9, 0x49, 0x8d, 0x65, 0x7b, 0xfd, 0x6d, 0x8e,
    0x39, 0x5f, 0xcf, 0xd3, 0x8b, 0xff, 0xcb, 0x7e, 0xdd, 0x6b, 0x19, 0xef, 0xeb, 0xa4, 0xdb, 0xaa,
    0x88, 0x33, 0x17, 0xc7, 0x3f, 0xe2, 0xb7, 0x74, 0x39, 0x00, 0xc1, 0xcd, 0x80, 0x07, 0x14, 0x3f,
    0x3f, 0x08, 0xb0, 0xbe, 0xfc, 0x60, 0xdf, 0xa7, 0x5c, 0x10, 0x10, 0xc1, 0xee, 0x8c, 0x3f, 0x1c,
    0x84, 0x03, 0x3e, 0xed, 0x76, 0x00, 0xaa, 0xde, 0x04
}};

const security::CertificateV3 aa_certificate(aa_certificate_buffer);

security::DelegatingSecurityEntity
build_delegating_entity(const Runtime &runtime,
                        security::BackendOpenSsl &backend,
                        security::CertificateProvider &cert_provider,
                        security::CertificateValidator &cert_validator,
                        security::CertificateCache &cert_cache,
                        security::SignHeaderPolicy &sign_header_policy,
                        PositionProvider &positioning)
{
    security::SignService sign_service = straight_sign_serviceV3(cert_provider, backend, sign_header_policy);
    security::VerifyService verify_service = straight_verify_service(runtime, cert_provider, cert_validator,
            backend, cert_cache, sign_header_policy, positioning);
    return security::DelegatingSecurityEntity(std::move(sign_service), std::move(verify_service));
}

pki::EnrolmentCertificateProvider
build_ec_provider(pki::EctlTrustStore &trust_store,
                  const pki::EctlPaths &paths,
                  security::BackendOpenSsl &backend,
                  const Runtime &runtime,
                  pki::CurlWrapper &curl,
                  const security::HashedId8 &rca_id,
                  const security::HashedId8 &ea_id,
                  const boost::optional<asn1::SequenceOfPsidSsp> &psid_ssp_list,
                  const boost::optional<std::string> &canonical_id)
{
    auto ea_res = trust_store.get_subcert(rca_id, ea_id);
    assert(ea_res);
    assert(ea_res->type == pki::SubCaType::EA);

    // TODO: undo
    ea_res->certificate = ea_certificate;

    return pki::EnrolmentCertificateProvider(
        *ea_res, backend, runtime, curl, paths, psid_ssp_list, canonical_id);
}

pki::AuthorizationTicketProvider
build_at_provider(pki::EctlTrustStore &trust_store,
                  const pki::EctlPaths &paths,
                  security::BackendOpenSsl &backend,
                  Runtime &runtime,
                  pki::CurlWrapper &curl,
                  security::CertificateProvider &ec_provider,
                  const security::HashedId8 &rca_id,
                  const security::HashedId8 &ea_id,
                  const security::HashedId8 &aa_id,
                  uint8_t num_authorization_tickets,
                  const security::SecurityEntity &security_entity,
                  const boost::optional<asn1::SequenceOfPsidSsp> &psid_ssp_list)
{
    auto ea_res = trust_store.get_subcert(rca_id, ea_id);
    assert(ea_res);
    assert(ea_res->type == pki::SubCaType::EA);

    // TODO: undo
    ea_res->certificate = ea_certificate;

    auto aa_res = trust_store.get_subcert(rca_id, aa_id);
    assert(aa_res);
    assert(aa_res->type == pki::SubCaType::AA);

    // TODO: undo
    aa_res->certificate = aa_certificate;

    return pki::AuthorizationTicketProvider(
        num_authorization_tickets, ec_provider, *ea_res, *aa_res,
        backend, runtime, curl, paths, security_entity, psid_ssp_list);
}

EctlSecurityEntity::EctlSecurityEntity(
    Runtime &runtime,
    PositionProvider &positioning,
    const std::string &trust_store_path,
    const security::HashedId8 &rca_id,
    const security::HashedId8 &ea_id,
    const security::HashedId8 &aa_id,
    uint8_t num_authorization_tickets,
    security::IdChangeCallback &&access_id_change_callback,
    const boost::optional<asn1::SequenceOfPsidSsp> &psid_ssp_list,
    const boost::optional<std::string> &canonical_id)
    : curl(runtime), paths(trust_store_path), cert_cache(runtime),
      trust_store(paths, runtime, curl, backend, cert_cache),
      ec_provider(build_ec_provider(trust_store, paths, backend, runtime,
                                    curl, rca_id, ea_id, psid_ssp_list,
                                    canonical_id)),
      at_provider(build_at_provider(trust_store, paths, backend, runtime,
                                    curl, ec_provider, rca_id, ea_id, aa_id,
                                    num_authorization_tickets, *this, psid_ssp_list)),
      sign_header_policy(runtime, positioning),
      cert_validator(backend, cert_cache, trust_store),
      delegating_entity(build_delegating_entity(runtime, backend, at_provider, cert_validator,
                        cert_cache, sign_header_policy, positioning))
{
    register_id_change_callback(std::move(access_id_change_callback));
}

security::EncapConfirm
EctlSecurityEntity::encapsulate_packet(security::EncapRequest &&request) {
    return delegating_entity.encapsulate_packet(std::move(request));
}

security::DecapConfirm
EctlSecurityEntity::decapsulate_packet(security::DecapRequest&& request)
{
    return delegating_entity.decapsulate_packet(std::move(request));
}

asn1::SequenceOfPsidSsp psid_ssp_list_example_manual()
{
    // Example code for PSID/SSP list creation

    // PSID/SSP for CA
    asn1::PsidSsp ca_psid_ssp;
    ca_psid_ssp->psid = aid::CA;
    ca_psid_ssp->ssp = asn1::allocate<ServiceSpecificPermissions_t>();
    ca_psid_ssp->ssp->present = ServiceSpecificPermissions_PR_bitmapSsp;
    OCTET_STRING_fromBuf(&ca_psid_ssp->ssp->choice.bitmapSsp, "\x01\xff\xfc", 3);

    // PSID/SSP for DEN
    asn1::PsidSsp den_psid_ssp;
    den_psid_ssp->psid = aid::DEN;
    den_psid_ssp->ssp = asn1::allocate<ServiceSpecificPermissions_t>();
    den_psid_ssp->ssp->present = ServiceSpecificPermissions_PR_bitmapSsp;
    OCTET_STRING_fromBuf(&den_psid_ssp->ssp->choice.bitmapSsp, "\x01\xff\xff\xff", 4);

    // PSID/SSP for GN_MGMT
    asn1::PsidSsp gn_mgmt_psid_ssp;
    gn_mgmt_psid_ssp->psid = aid::GN_MGMT;

    // Put all PSID/SSP pairs into a list
    asn1::SequenceOfPsidSsp psid_ssp_list;
    ASN_SEQUENCE_ADD(&psid_ssp_list->list,
                     asn1::copy(asn_DEF_PsidSsp, &(*ca_psid_ssp)));
    ASN_SEQUENCE_ADD(&psid_ssp_list->list,
                     asn1::copy(asn_DEF_PsidSsp, &(*den_psid_ssp)));
    ASN_SEQUENCE_ADD(&psid_ssp_list->list,
                     asn1::copy(asn_DEF_PsidSsp, &(*gn_mgmt_psid_ssp)));

    xer_fprint(stdout, &asn_DEF_SequenceOfPsidSsp, &(*psid_ssp_list));

    return psid_ssp_list;
}

// Or read from file
const std::string psid_ssp_xml =
R"(<SequenceOfPsidSsp>
    <PsidSsp>
        <psid>36</psid>
        <ssp>
            <bitmapSsp>01 FF FC</bitmapSsp>
        </ssp>
    </PsidSsp>
    <PsidSsp>
        <psid>37</psid>
        <ssp>
            <bitmapSsp>01 FF FF FF</bitmapSsp>
        </ssp>
    </PsidSsp>
    <PsidSsp>
        <psid>141</psid>
    </PsidSsp>
</SequenceOfPsidSsp>)";

asn1::SequenceOfPsidSsp psid_ssp_list_example_xml()
{
    ByteBuffer buffer(psid_ssp_xml.begin(), psid_ssp_xml.end());
    asn1::SequenceOfPsidSspXml psid_ssp_list_xml;
    psid_ssp_list_xml.decode(buffer);

    // Swap into OER representation
    asn1::SequenceOfPsidSsp psid_ssp_list;
    psid_ssp_list.swap(psid_ssp_list_xml);
    return psid_ssp_list;
}

security::HashedId8 hashed_id_from_hex_string(const std::string &hex_string)
{
    assert(hex_string.size() == 16);
    security::HashedId8 hashed_id;
    boost::algorithm::unhex(hex_string, hashed_id.data());
    return hashed_id;
}

} // namespace pki

} // namespace vanetza
