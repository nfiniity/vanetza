#include <gtest/gtest.h>
#include <vanetza/pki/enrolment_certificates.hpp>
#include <vanetza/common/its_aid.hpp>

TEST(EnrolmentCertificates, BuildEnrolmentRequest)
{
    std::string its_id("my_canonical_id");
    vanetza::security::openssl::EvpKey canonical_key("prime256v1");
    vanetza::security::openssl::EvpKey verification_key("prime256v1");

    // PSID/SSP for CA
    vanetza::asn1::PsidSsp ca_psid_ssp;
    ca_psid_ssp->psid = vanetza::aid::CA;
    ca_psid_ssp->ssp = vanetza::asn1::allocate<ServiceSpecificPermissions_t>();
    ca_psid_ssp->ssp->present = ServiceSpecificPermissions_PR_bitmapSsp;
    OCTET_STRING_fromBuf(&ca_psid_ssp->ssp->choice.bitmapSsp, "\x01\xff\xfc", 3);

    // PSID/SSP for DEN
    vanetza::asn1::PsidSsp den_psid_ssp;
    den_psid_ssp->psid = vanetza::aid::DEN;
    den_psid_ssp->ssp = vanetza::asn1::allocate<ServiceSpecificPermissions_t>();
    den_psid_ssp->ssp->present = ServiceSpecificPermissions_PR_bitmapSsp;
    OCTET_STRING_fromBuf(&den_psid_ssp->ssp->choice.bitmapSsp, "\x01\xff\xff\xff", 4);

    // PSID/SSP for GN_MGMT
    vanetza::asn1::PsidSsp gn_mgmt_psid_ssp;
    gn_mgmt_psid_ssp->psid = vanetza::aid::GN_MGMT;

    // Put all PSID/SSP pairs into a list
    vanetza::asn1::SequenceOfPsidSsp psid_ssp_list;
    ASN_SEQUENCE_ADD(&psid_ssp_list->list, vanetza::asn1::copy(asn_DEF_PsidSsp, &(*ca_psid_ssp)));
    ASN_SEQUENCE_ADD(&psid_ssp_list->list, vanetza::asn1::copy(asn_DEF_PsidSsp, &(*den_psid_ssp)));
    ASN_SEQUENCE_ADD(&psid_ssp_list->list, vanetza::asn1::copy(asn_DEF_PsidSsp, &(*gn_mgmt_psid_ssp)));

    vanetza::ByteBuffer target_certificate_buffer {{
        0x80, 0x03, 0x00, 0x82, 0x08, 0x87, 0xe5, 0x80, 0xdd, 0x2b, 0x0d, 0x47, 0xff, 0x19, 0x81, 0x0c,
        0x30, 0x5f, 0x43, 0x4d, 0x43, 0x2d, 0x45, 0x41, 0x31, 0x5f, 0x4c, 0x30, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0x88, 0xee, 0x86, 0x86, 0x00, 0x05, 0x01, 0x01, 0x80, 0x02, 0x02, 0x6f, 0x81, 0x03,
        0x02, 0x01, 0x0e, 0x01, 0x02, 0x20, 0x80, 0x01, 0x08, 0x80, 0x01, 0x24, 0x82, 0x08, 0x03, 0x01,
        0xff, 0xfc, 0x03, 0xff, 0x00, 0x03, 0x80, 0x01, 0x25, 0x82, 0x0a, 0x04, 0x01, 0xff, 0xff, 0xff,
        0x04, 0xff, 0x00, 0x00, 0x00, 0x80, 0x01, 0x89, 0x82, 0x06, 0x02, 0x01, 0xe0, 0x02, 0xff, 0x1f,
        0x80, 0x01, 0x8a, 0x82, 0x06, 0x02, 0x01, 0xc0, 0x02, 0xff, 0x3f, 0x80, 0x01, 0x8b, 0x82, 0x0e,
        0x06, 0x01, 0x74, 0x40, 0x01, 0xff, 0xf8, 0x06, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01,
        0x8c, 0x82, 0x0a, 0x04, 0x01, 0xff, 0xff, 0xe0, 0x04, 0xff, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x8d,
        0x80, 0x02, 0x02, 0x6f, 0x82, 0x06, 0x02, 0x01, 0xc0, 0x02, 0xff, 0x3f, 0x40, 0x00, 0x80, 0x01,
        0x01, 0x80, 0x02, 0x02, 0x6f, 0x82, 0x06, 0x02, 0x01, 0xc0, 0x02, 0xff, 0x3f, 0x00, 0x81, 0x82,
        0x85, 0x64, 0x3c, 0x3b, 0xe9, 0x06, 0x81, 0xfa, 0x98, 0x7f, 0x4a, 0x89, 0x47, 0xcb, 0x21, 0x16,
        0xfc, 0x7c, 0x08, 0x35, 0xdd, 0x83, 0x45, 0x2d, 0x69, 0x9b, 0x7f, 0x2c, 0x5e, 0x40, 0x93, 0x2d,
        0x80, 0x81, 0x83, 0x1c, 0x1d, 0x11, 0xe0, 0xd2, 0x57, 0xf9, 0xdd, 0x05, 0x6c, 0xfb, 0xc0, 0x71,
        0xa3, 0x93, 0x11, 0xea, 0x42, 0xe9, 0x33, 0x4c, 0x25, 0x22, 0x2f, 0xf2, 0x54, 0xc6, 0xb7, 0xa9,
        0x19, 0x30, 0x49, 0x82, 0x61, 0x80, 0x88, 0xaf, 0x09, 0xf3, 0x30, 0x1b, 0xfa, 0x01, 0xd8, 0x07,
        0x06, 0xa5, 0x37, 0x46, 0x82, 0x19, 0xfe, 0x0a, 0x29, 0x6e, 0x21, 0x52, 0x7d, 0xf9, 0x30, 0x93,
        0xb8, 0x64, 0x38, 0x79, 0x6b, 0x92, 0xf1, 0x89, 0x32, 0x24, 0x23, 0x5a, 0xe4, 0x43, 0x43, 0x2b,
        0xc2, 0x2f, 0xea, 0xc4, 0xf3, 0x1d, 0x53, 0x4f, 0xfe, 0xdf, 0xd5, 0x2d, 0xb2, 0x88, 0x38, 0xe9,
        0x18, 0x34, 0x2f, 0x6a, 0x7a, 0xad, 0x84, 0x09, 0x19, 0xde, 0x92, 0xdd, 0xb2, 0x4b, 0x9f, 0x90,
        0x76, 0x93, 0x8f, 0xdd, 0x20, 0xa4, 0x1c, 0x0b, 0xfb, 0x8a, 0xf9, 0xf7, 0x38, 0x64, 0x96, 0x06,
        0x05, 0xdf, 0xe0, 0xd4, 0xa1, 0x6f
    }};
    vanetza::security::CertificateV3 target_certificate(target_certificate_buffer);

    // Build InnerEcRequest
    vanetza::security::SecuredMessageV3 enrolment_request =
        vanetza::pki::build_enrolment_request(its_id, verification_key,
                                              canonical_key, target_certificate,
                                              psid_ssp_list);

    ASSERT_TRUE(enrolment_request.is_encrypted_message());

    vanetza::ByteBuffer enrolment_request_bb = enrolment_request.serialize();
    vanetza::asn1::EtsiTs103097Data decoded_enrolment_request;
    decoded_enrolment_request.decode(enrolment_request_bb);
    xer_fprint(stdout, &asn_DEF_Ieee1609Dot2Data, &(*decoded_enrolment_request));
}
